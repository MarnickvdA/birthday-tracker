// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: birthdays.sql

package database

import (
	"context"
)

const deletePastBirthdayNotifications = `-- name: DeletePastBirthdayNotifications :one
WITH deleted_rows AS (
    DELETE FROM birthday_notifications
    WHERE TO_DATE(scheduled_at, 'YYYY-MM-DD') < CURRENT_DATE
    RETURNING id, person_id, scheduled_at, state
)
SELECT COUNT(*) FROM deleted_rows
`

func (q *Queries) DeletePastBirthdayNotifications(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, deletePastBirthdayNotifications)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getScheduledBirthdayNotificationsForToday = `-- name: GetScheduledBirthdayNotificationsForToday :many
SELECT 
    bn.person_id,
    p.name, 
    p.birth_date,
    EXTRACT(YEAR FROM AGE(TO_DATE(p.birth_date, 'YYYY-MM-DD'))) AS age
FROM 
    birthday_notifications bn
JOIN 
    persons p ON bn.person_id = p.id
WHERE
    TO_CHAR(TO_DATE(bn.scheduled_at, 'YYYY-MM-DD'), 'MM-DD') = TO_CHAR(CURRENT_DATE, 'MM-DD')
    AND bn.state = 'scheduled'
`

type GetScheduledBirthdayNotificationsForTodayRow struct {
	PersonID  string
	Name      string
	BirthDate string
	Age       string
}

func (q *Queries) GetScheduledBirthdayNotificationsForToday(ctx context.Context) ([]GetScheduledBirthdayNotificationsForTodayRow, error) {
	rows, err := q.db.QueryContext(ctx, getScheduledBirthdayNotificationsForToday)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScheduledBirthdayNotificationsForTodayRow
	for rows.Next() {
		var i GetScheduledBirthdayNotificationsForTodayRow
		if err := rows.Scan(
			&i.PersonID,
			&i.Name,
			&i.BirthDate,
			&i.Age,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scheduleBirthdayNotifications = `-- name: ScheduleBirthdayNotifications :one
WITH inserted_rows AS (
    INSERT INTO birthday_notifications (person_id, scheduled_at, state)
    SELECT id, TO_CHAR(CURRENT_DATE + INTERVAL '1 day', 'YYYY-MM-DD'), 'scheduled'
    FROM persons
    WHERE TO_CHAR(TO_DATE(birth_date, 'YYYY-MM-DD'), 'MM-DD') = TO_CHAR(CURRENT_DATE + INTERVAL '1 day', 'MM-DD')
    ON CONFLICT (person_id) DO NOTHING
    RETURNING id, person_id, scheduled_at, state
)
SELECT COUNT(*) FROM inserted_rows
`

func (q *Queries) ScheduleBirthdayNotifications(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, scheduleBirthdayNotifications)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBirthdayNotificationsStateForToday = `-- name: UpdateBirthdayNotificationsStateForToday :exec
UPDATE birthday_notifications
SET state = $1
WHERE TO_DATE(scheduled_at, 'YYYY-MM-DD') = CURRENT_DATE
`

func (q *Queries) UpdateBirthdayNotificationsStateForToday(ctx context.Context, state string) error {
	_, err := q.db.ExecContext(ctx, updateBirthdayNotificationsStateForToday, state)
	return err
}
