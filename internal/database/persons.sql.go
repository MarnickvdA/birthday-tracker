// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: persons.sql

package database

import (
	"context"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO persons (id, name, birth_date)
VALUES (SUBSTRING(encode(sha256(($1 || $2 || NOW()::text)::bytea), 'hex'), 1, 16), $1, $2)
RETURNING id, name, birth_date
`

type CreatePersonParams struct {
	Name      string
	BirthDate string
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, createPerson, arg.Name, arg.BirthDate)
	var i Person
	err := row.Scan(&i.ID, &i.Name, &i.BirthDate)
	return i, err
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM persons WHERE id = $1
`

func (q *Queries) DeletePerson(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const listPersons = `-- name: ListPersons :many
SELECT id, name, birth_date FROM persons
ORDER BY TO_CHAR(TO_DATE(birth_date, 'YYYY-MM-DD'), 'MM-DD')
`

func (q *Queries) ListPersons(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, listPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(&i.ID, &i.Name, &i.BirthDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
